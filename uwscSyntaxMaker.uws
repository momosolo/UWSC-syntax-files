option specialchar

//クラス名格納用ハッシュテーブル
public hashtbl classList = hash_sort

//強調文字列データ格納用ハッシュテーブル
public hashtbl syntaxData = hash_sort

//各クラス共通定義
call uwscLibrary\const.uws

//各クラスが記載されたファイル
call uwscEditorSetting\hidemaru.uws
call uwscEditorSetting\mery.uws
call uwscEditorSetting\noeditor.uws
call uwscEditorSetting\notepadplusplus.uws
call uwscEditorSetting\sakura.uws

//CSVファイル読み込み
readCSV

//call先のクラスファイル読み込み
readClassName

//全エディタのファイル生成
all.makeFile
///////////////////////////////////////////////////////////////////////////////
procedure readCSV
	csvFid = fopen("uwscSyntax.csv") // ヘルプから生成した構文情報CSVファイル
	for row = 2 to fget(csvFid, F_LINECOUNT)
		syntax = fget(csvFid, row, 1) // アルファベット順のキーに使用
		syntaxData[syntax] = fget(csvFid, row) // 各行ハッシュテーブルに格納
	next
	fclose(csvFid)
fend
///////////////////////////////////////////////////////////////////////////////
procedure readClassName
	checkDirectory = "uwscEditorSetting"
	
	dim callFileList[0]
	dim defineClassList[0]
	
	// このファイル自身の持つ「call uwscEditorSetting\*.uws」を取得
	pattern = "^[\t 　]*call[\t 　]+(checkDirectory\\[^\t 　\r\n]+.uws)"
	pattern = replace(pattern, "checkDirectory", checkDirectory)
	searchPatternFromFile(pattern, GET_UWSC_NAME, 0, callFileList)
	
	for filePath in callFileList
		// 対象ファイルの持つ「class ***」「module ***」を取得
		pattern = "^[\t 　]*(class|module)[\t 　]+([^\t 　\r\n]+)"
		searchPatternFromFile(pattern, filePath, 1, defineClassList)
		
		for className in defineClassList
			classList[className] = true
		next
	next
fend
///////////////////////////////////////////////////////////////////////////////
procedure searchPatternFromFile(pattern, fileName, placeNum, var resultList[])
	fid = fopen(fileName)
	textStr = fget(fid, F_ALLTEXT)
	fclose(fid)
	re = createoleobj("VBScript.RegExp")
	re.Global = true	 //複数個所を検索
	re.IgnoreCase = true //大文字小文字を区別しない
	re.Multiline = true  //検索対象を複数行として扱う
	re.pattern = pattern
	matches = re.Execute(textStr)
	resize(resultList, matches.Count -1)
	for i=0 to matches.Count-1
		resultList[i] = matches.Item(i).SubMatches.Item(placeNum)
	next
fend
///////////////////////////////////////////////////////////////////////////////
class all
	procedure makeFile
		for className in classList
			//各ディレクトリの生成
			makeDirectory(className)
			
			//各ファイルの生成
			evalCommandReplaceClassName("className.openFile()",  className)
			evalCommandReplaceClassName("className.putHeader()", className)
			evalCommandReplaceClassName("className.putBody()",	 className)
			evalCommandReplaceClassName("className.putFooter()", className)
			evalCommandReplaceClassName("className.closeFile()", className)
		next
	fend
	
	procedure makeDirectory(className)
		directory = evalCommandReplaceClassName("className.directory", className)
		doscmdStr = replace("mkdir directory", "directory", directory)
		doscmd(doscmdStr)
	fend
	
	function evalCommandReplaceClassName(command, className)
		evalStr = replace(command, "className", className)
		result = eval(evalStr)
	fend
endclass
///////////////////////////////////////////////////////////////////////////////